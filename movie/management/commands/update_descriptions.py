import os
from django.core.management.base import BaseCommand
from movie.models import Movie
from openai import OpenAI
from dotenv import load_dotenv

# ‚úÖ Cargar variables de entorno desde el archivo .env
load_dotenv('openAI.env')

# ‚úÖ Inicializar el cliente de OpenAI con la API Key
client = OpenAI(api_key=os.environ.get('openai_apikey'))

def get_completion(prompt, model="gpt-3.5-turbo"):
    """
    ‚úÖ Funci√≥n auxiliar para obtener la respuesta de la API
    """
    # Define el mensaje con el rol 'user' y el contenido que enviamos
    messages = [{"role": "user", "content": prompt}]
    
    # Llama a la API con el modelo y los mensajes
    response = client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=0  # Controla la creatividad (0 = m√°s preciso)
    )
    
    # Retorna solo el contenido de la respuesta generada
    return response.choices[0].message.content.strip()

class Command(BaseCommand):
    help = "Update movie descriptions using OpenAI API (first movie only)"

    def handle(self, *args, **kwargs):
        # ‚úÖ Verificar si la API key est√° disponible
        if not os.environ.get('openai_apikey'):
            self.stderr.write("Error: OpenAI API key not found in environment variables")
            self.stderr.write("Please check your openAI.env file")
            return

        instruction = "Mejora la descripci√≥n de esta pel√≠cula haci√©ndola m√°s atractiva, detallada y cinematogr√°fica. Hazla m√°s emocionante y engaging para el p√∫blico:"
        
        # ‚úÖ Obtener todas las pel√≠culas de la base de datos
        movies = Movie.objects.all()
        self.stdout.write(f"Found {movies.count()} movies")
        
        # ‚úÖ Recorrer las pel√≠culas (solo primera por el break)
        for movie in movies:
            try:
                self.stdout.write(f"üîÑ Processing: {movie.title}")
                
                # ‚úÖ Construir el prompt espec√≠fico para Los juegos del hambre
                prompt = f"{instruction} Actualiza la descripci√≥n de la pel√≠cula 'Los juegos del hambre'. "
                prompt += "Debe ser una distop√≠a emocionante donde Katniss Everdeen se convierte en el s√≠mbolo de la rebeli√≥n."
                
                # ‚úÖ Obtener la nueva descripci√≥n de la API
                response = get_completion(prompt)
                
                # ‚úÖ Actualizar la descripci√≥n en la base de datos
                movie.description = response
                movie.save()
                
                self.stdout.write(self.style.SUCCESS(f"‚úÖ Updated description for: {movie.title}"))
                self.stdout.write(self.style.SUCCESS("üìù New description:"))
                self.stdout.write(self.style.SUCCESS(response[:200] + "..."))  # Muestra solo los primeros 200 caracteres
                
                # ‚ö†Ô∏è BREAK IMPORTANTE - No quitar para ahorrar costos
                self.stdout.write(self.style.WARNING("‚èπÔ∏è Stopping after first movie (break enabled)"))
                break
                
            except Exception as e:
                self.stderr.write(f"‚ùå Error processing {movie.title}: {str(e)}")
                break

        self.stdout.write(self.style.SUCCESS("üéâ Finished processing! Only 'Los juegos del hambre' was updated."))